name: Execução de Testes
on:
    workflow_call: 

jobs:
    unit-test:
        name: Teste de unidade
        runs-on: ubuntu-latest
        steps:
            - name: Obtendo o código do projeto
              uses: actions/checkout@v4
            - name: Setup dotnet
              uses: actions/setup-dotnet@v4
              with:
                dotnet-version: "8.0.300"
            - name: Execução do teste de Unidade
              working-directory: ./src
              run: dotnet test ./Review-Filmes.Test.Unit/Review-Filmes.Test.Unit.csproj

    integration-test:
      name: Teste de integração
      runs-on: ubuntu-latest
      services:
        postgre:
          image: postgres:latest
          ports: 
            - 5432:5432
          env:
            POSTGRES_USER: review
            POSTGRES_PASSWORD: postgrespwd
            POSTGRES_DB: review-filmes
      steps:
        - name: Obtendo o código do projeto
          uses: actions/checkout@v4

        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: "8.0.300"

        - name: Execução do teste de Integração
          working-directory: ./src
          run: dotnet test ./Review-Filmes.Test.Integration/Review-Filmes.Test.Integration.csproj
          env:
            ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=review-filmes;Username=review;Password=postgrespwd"

    # sonarqube:
    #   name: Scan com o Sonarqube
    #   runs-on: ubuntu-latest
    #   steps:
    #     - name: Obtendo o código do projeto
    #       uses: actions/checkout@v4
    #     - name: Setup JDK
    #       uses: actions/setup-java@v4
    #       with: 
    #         java-version: '21'
    #         # distribution: 'temurin'
    #         distribution: 'adopt'

    #     - name: Setup dotnet
    #       uses: actions/setup-dotnet@v4
    #       with:
    #         dotnet-version: "8.0.300"

    #     - name: Instalação do Sonarqube Scanner
    #       run: dotnet tool install --global dotnet-sonarscanner

        # - name: Build and analysis
        #   working-directory: ./src  
        #   run: |
        #     dotnet sonarscanner begin \
        #     /o:"ventocilla" \
        #     /k:"ventocilla_filme" \
        #     /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} \
        #     /d:sonar.token=${{ secrets.SONAR_TOKEN }}

        #     dotnet build Review-Filmes.sln
        #     dotnet sonarscanner end /d:sonar.token=${{ secrets.SONAR_TOKEN }}

        # - name: Verificação do Quality Gate
        #   uses: sonarsource/sonarqube-quality-gate-action@master
        #   env: 
        #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        #   with: 
        #     scanMetadataReportFile: ./src/.sonarqube/.sonar/report-task.txt